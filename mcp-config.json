[
    {
        "id": "server-filesystem",
        "name": "Server Filesystem",
        "category": "Filesystem",
        "description": "A server filesystem service that provides file system access capabilities",
        "author": "ModelContextProtocol",
        "homepage": "https://www.npmjs.com/package/@modelcontextprotocol/server-filesystem",
        "tags": [
            "filesystem",
            "files",
            "storage"
        ],
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "-y",
                    "@modelcontextprotocol/server-filesystem",
                    "$file_path$"
                ],
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$file_path$",
                        "desc": "File system path",
                        "doc": "The root directory path that the filesystem server will have access to",
                        "placeholder": "/Users/username/Documents"
                    }
                ]
            },
            {
                "key": "env",
                "value": {},
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            }
        ]
    },
    {
        "id": "hubspot-mcp-server",
        "name": "HubSpot MCP Server",
        "category": "CRM",
        "description": "HubSpot's MCP server enables AI clients to seamlessly take HubSpot actions and interact with your HubSpot data. This opens up powerful new integration possibilities for the ecosystem.",
        "author": "HubSpot",
        "homepage": "https://www.npmjs.com/package/@hubspot/mcp-server",
        "tags": [
            "crm",
            "hubspot",
            "sales",
            "marketing",
            "customer"
        ],
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "-y",
                    "@hubspot/mcp-server"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "env",
                "value": {
                    "PRIVATE_APP_ACCESS_TOKEN": "$PRIVATE_APP_ACCESS_TOKEN$"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$PRIVATE_APP_ACCESS_TOKEN$",
                        "desc": "HubSpot Private App Access Token",
                        "doc": "https://www.npmjs.com/package/@hubspot/mcp-server#Pre-requisites",
                        "placeholder": "PRIVATE_APP_ACCESS_TOKEN"
                    }
                ]
            }
        ]
    },
    {
        "id": "notion-api",
        "name": "Notion",
        "category": "Productivity",
        "description": "Connect to Notion workspace for reading and writing pages, databases, and blocks through the Notion API",
        "author": "Notion",
        "homepage": "https://github.com/makenotion/notion-mcp-server",
        "tags": [
            "productivity",
            "notion",
            "workspace",
            "database"
        ],
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "-y",
                    "@notionhq/notion-mcp-server"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "env",
                "value": {
                    "OPENAPI_MCP_HEADERS": "{\"Authorization\": \"Bearer $NOTION_TOKEN$\",\"Notion-Version\": \"2022-06-28\"}"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$NOTION_TOKEN$",
                        "desc": "Notion Integration Token",
                        "doc": "https://github.com/makenotion/notion-mcp-server#installation",
                        "placeholder": "NOTION_TOKEN"
                    }
                ]
            }
        ]
    },
    {
        "id": "slack-mcp-server",
        "name": "Slack",
        "category": "Communication",
        "description": "The most powerful MCP Slack Server with no permission requirements, Apps support, multiple transports Stdio and SSE, DMs, Group DMs and smart history fetch logic.",
        "author": "korotovsky",
        "homepage": "https://github.com/korotovsky/slack-mcp-server/",
        "tags": [
            "communication",
            "slack",
            "messaging",
            "collaboration",
            "team"
        ],
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "-y",
                    "slack-mcp-server@latest",
                    "--transport",
                    "stdio"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "env",
                "value": {
                    "SLACK_MCP_XOXP_TOKEN": "$SLACK_MCP_XOXP_TOKEN$",
                    "SLACK_MCP_ADD_MESSAGE_TOOL": true
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$SLACK_MCP_XOXP_TOKEN$",
                        "desc": "SLACK XOXP/XOXB Token",
                        "doc": "https://github.com/korotovsky/slack-mcp-server/blob/master/docs/01-authentication-setup.md#alternative-using-slack_mcp_xoxp_token-user-oauth",
                        "placeholder": "SLACK XOXP/XOXB Token"
                    }
                ]
            }
        ]
    },
    {
        "id": "ga4-mcp-server",
        "name": "Google Analytics",
        "category": "Analytics",
        "description": "Connect to Google Analytics for reading and writing events, user properties, and custom dimensions and metrics.\nhttps://github.com/surendranb/google-analytics-mcp#test-your-setup-optional",
        "author": "surendranb",
        "homepage": "https://github.com/surendranb/google-analytics-mcp",
        "tags": [
            "analytics",
            "google",
            "ga4",
            "events",
            "user properties"
        ],
        "config": [
            {
                "key": "command",
                "value": "ga4-mcp-server",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "env",
                "value": {
                    "GOOGLE_APPLICATION_CREDENTIALS": "$GOOGLE_APPLICATION_CREDENTIALS_PATH$",
                    "GA4_PROPERTY_ID": "$GA4_PROPERTY_ID$"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$GOOGLE_APPLICATION_CREDENTIALS_PATH$",
                        "desc": "google application credentials json path",
                        "doc": "https://github.com/surendranb/google-analytics-mcp#create-service-account-in-google-cloud-console",
                        "placeholder": "google application credentials json path"
                    },
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$GA4_PROPERTY_ID$",
                        "desc": "ga4 property id",
                        "doc": "https://github.com/surendranb/google-analytics-mcp#find-your-ga4-property-id",
                        "placeholder": "ga4 property id"
                    }
                ]
            }
        ]
    },
    {
        "id": "google-workspace",
        "name": "Google Workspace",
        "category": "Productivity",
        "description": "Connect to Google Workspace for reading and writing documents, spreadsheets, and presentations.\nhttps://github.com/taylorwilsdon/google_workspace_mcp",
        "author": "taylorwilsdon",
        "homepage": "https://github.com/taylorwilsdon/google_workspace_mcp",
        "tags": [
            "productivity",
            "google",
            "workspace",
            "documents"
        ],
        "config": [
            {
                "key": "command",
                "value": "uvx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "workspace-mcp"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "env",
                "value": {
                    "GOOGLE_OAUTH_CLIENT_ID": "$GOOGLE_OAUTH_CLIENT_ID$",
                    "GOOGLE_OAUTH_CLIENT_SECRET": "$GOOGLE_OAUTH_CLIENT_SECRET$",
                    "USER_GOOGLE_EMAIL": "$USER_GOOGLE_EMAIL$"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$GOOGLE_OAUTH_CLIENT_ID$",
                        "desc": "OAuth client ID from Google Cloud (used by both legacy auth and OAuth 2.1)",
                        "doc": "https://github.com/taylorwilsdon/google_workspace_mcp#configuration",
                        "placeholder": "GOOGLE_OAUTH_CLIENT_ID"
                    },
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$GOOGLE_OAUTH_CLIENT_SECRET$",
                        "desc": "OAuth client secret (used by both legacy auth and OAuth 2.1)",
                        "doc": "https://github.com/taylorwilsdon/google_workspace_mcp#configuration",
                        "placeholder": "GOOGLE_OAUTH_CLIENT_SECRET"
                    },
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$USER_GOOGLE_EMAIL$",
                        "desc": "Default email for single-user auth",
                        "doc": "https://github.com/taylorwilsdon/google_workspace_mcp#configuration",
                        "placeholder": "USER_GOOGLE_EMAIL"
                    }
                ]
            }
        ]
    },
    {
        "id": "chrome-automation",
        "name": "Chrome Automation",
        "category": "Automation",
        "description": "Chrome Automation MCP powered by Playwright.\nhttps://github.com/JackZhao98/chrome-automation-mcp",
        "author": "JackZhao98",
        "homepage": "https://github.com/JackZhao98/chrome-automation-mcp",
        "tags": [
            "automation",
            "chrome",
            "playwright"
        ],
        "config": [
            {
                "key": "command",
                "value": "chrome-automation-mcp-lite",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            }
        ]
    },
    {
        "id": "zoom-mcp-server",
        "name": "Zoom MCP Server",
        "category": "Communication",
        "description": "A Model Context Protocol server for integrating with Zoom video conferencing platform",
        "author": "javaprogrammerlb",
        "tags": [
            "zoom",
            "video-conferencing",
            "communication",
            "meeting"
        ],
        "homepage": "https://github.com/javaprogrammerlb/zoom-mcp-server",
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false
            },
            {
                "key": "args",
                "value": [
                    "-y",
                    "@yitianyigexiangfa/zoom-mcp-server@latest"
                ],
                "is_user_fill": false
            },
            {
                "key": "env",
                "value": {
                    "ZOOM_ACCOUNT_ID": "${ZOOM_ACCOUNT_ID}",
                    "ZOOM_CLIENT_ID": "${ZOOM_CLIENT_ID}",
                    "ZOOM_CLIENT_SECRET": "${ZOOM_CLIENT_SECRET}"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "${ZOOM_ACCOUNT_ID}",
                        "desc": "Zoom Account ID for authentication",
                        "doc": "https://github.com/javaprogrammerlb/zoom-mcp-server#2-steps-to-play-with-zoom-mcp-server",
                        "placeholder": "ZOOM_ACCOUNT_ID"
                    },
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "${ZOOM_CLIENT_ID}",
                        "desc": "Zoom Client ID for authentication",
                        "doc": "https://github.com/javaprogrammerlb/zoom-mcp-server#2-steps-to-play-with-zoom-mcp-server",
                        "placeholder": "ZOOM_CLIENT_ID"
                    },
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "${ZOOM_CLIENT_SECRET}",
                        "desc": "Zoom Client Secret for authentication",
                        "doc": "https://github.com/javaprogrammerlb/zoom-mcp-server#2-steps-to-play-with-zoom-mcp-server",
                        "placeholder": "ZOOM_CLIENT_SECRET"
                    }
                ]
            }
        ]
    },
    {
        "id": "figma-developer-mcp",
        "name": "Framelink Figma MCP",
        "category": "Design",
        "description": "MCP server to provide Figma layout information to AI coding agents like Cursor. Give your coding agent access to your Figma data to implement designs in any framework in one-shot.",
        "author": "GLips",
        "tags": [
            "design",
            "figma",
            "ui",
            "layout"
        ],
        "homepage": "https://github.com/GLips/Figma-Context-MCP",
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "-y",
                    "figma-developer-mcp",
                    "--figma-api-key=$FIGMA_API_KEY$",
                    "--stdio"
                ],
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$FIGMA_API_KEY$",
                        "desc": "Figma API access token",
                        "doc": "https://github.com/GLips/Figma-Context-MCP#getting-started",
                        "placeholder": "FIGMA_ API KEY"
                    }
                ]
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            }
        ]
    },
    {
        "id": "netlify-mcp",
        "name": "Netlify MCP",
        "category": "Deployment",
        "description": "A Model Context Protocol server for integrating with Netlify deployment platform, allowing AI agents to deploy and manage sites on Netlify.",
        "author": "Netlify",
        "tags": [
            "deployment",
            "netlify",
            "hosting",
            "jamstack"
        ],
        "homepage": "https://github.com/netlify/netlify-mcp",
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "-y",
                    "@netlify/mcp"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "env",
                "value": {
                    "NETLIFY_PERSONAL_ACCESS_TOKEN": "$NETLIFY_PERSONAL_ACCESS_TOKEN$"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$NETLIFY_PERSONAL_ACCESS_TOKEN$",
                        "desc": "Netlify Personal Access Token",
                        "doc": "https://docs.netlify.com/build/build-with-ai/netlify-mcp-server/#get-a-new-pat",
                        "placeholder": "NETLIFY_PERSONAL_ACCESS_TOKEN"
                    }
                ]
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            }
        ]
    },
    {
        "id": "sentry-mcp",
        "name": "Sentry",
        "category": "Monitoring",
        "description": "A Model Context Protocol server for integrating with Sentry error tracking platform, allowing AI agents to monitor and analyze application errors and performance issues.",
        "author": "Sentry",
        "tags": [
            "monitoring",
            "sentry",
            "error-tracking",
            "performance",
            "debugging"
        ],
        "homepage": "https://github.com/getsentry/sentry-mcp",
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "@sentry/mcp-server@latest"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "env",
                "value": {
                    "SENTRY_ACCESS_TOKEN": "$SENTRY_ACCESS_TOKEN$",
                    "SENTRY_HOST": "$SENTRY_HOST$"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$SENTRY_ACCESS_TOKEN$",
                        "desc": "Sentry Access Token",
                        "doc": "https://docs.sentry.io/product/mcp-server/#authentication",
                        "placeholder": "SENTRY_ACCESS_TOKEN"
                    },
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$SENTRY_HOST$",
                        "desc": "Sentry Host",
                        "doc": "https://docs.sentry.io/product/mcp-server/#configuration",
                        "placeholder": "sentry.io or your custom Sentry instance"
                    }
                ]
            }
        ]
    },
    {
        "id": "calendly-mcp",
        "name": "Calendly",
        "category": "Communication",
        "description": "A Model Context Protocol server for integrating with Calendly.",
        "author": "meAmitPatil",
        "tags": [
            "communication",
            "calendly",
            "scheduling",
            "appointment"
        ],
        "homepage": "https://github.com/meAmitPatil/calendly-mcp-server",
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "calendly-mcp-server"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "env",
                "value": {
                    "CALENDLY_API_KEY": "$CALENDLY_API_KEY$"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$CALENDLY_API_KEY$",
                        "desc": "CALENDLY API KEY",
                        "doc": "https://github.com/meAmitPatil/calendly-mcp-server?tab=readme-ov-file#option-1-personal-access-token-pat",
                        "placeholder": "CALENDLY_API_KEY"
                    }
                ]
            }
        ]
    },
    {
        "id": "redis-mcp",
        "name": "Redis",
        "category": "Database",
        "description": "The official Redis MCP Server is a natural language interface designed for agentic applications to manage and search data in Redis efficiently.",
        "author": "Redis",
        "tags": [
            "database",
            "redis",
            "cache",
            "key-value"
        ],
        "homepage": "https://github.com/redis/mcp-redis",
        "config": [
            {
                "key": "command",
                "value": "uvx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "--from",
                    "git+https://github.com/redis/mcp-redis.git",
                    "redis-mcp-server"
                ],
                "is_user_fill": false
            },
            {
                "key": "env",
                "value": {
                    "REDIS_HOST": "$REDIS_HOST$",
                    "REDIS_PORT": "$REDIS_PORT$",
                    "REDIS_DB": "$REDIS_DB$",
                    "REDIS_PWD": "$REDIS_PWD$"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$REDIS_HOST$",
                        "desc": "Redis host",
                        "doc": "https://github.com/redis/mcp-redis#configuration-via-command-line-arguments",
                        "placeholder": "localhost"
                    },
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$REDIS_PORT$",
                        "desc": "Redis port",
                        "doc": "https://github.com/redis/mcp-redis#configuration-via-command-line-arguments",
                        "placeholder": "6379"
                    },
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$REDIS_DB$",
                        "desc": "Redis database number",
                        "doc": "https://github.com/redis/mcp-redis#configuration-via-command-line-arguments",
                        "placeholder": "0"
                    },
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$REDIS_PWD$",
                        "desc": "Redis password",
                        "doc": "https://github.com/redis/mcp-redis#configuration-via-environment-variables",
                        "placeholder": "REDIS_PWD"
                    }
                ]
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            }
        ]
    },
    {
        "id": "stripe-mcp",
        "name": "Stripe MCP",
        "category": "Payment",
        "description": "Let your AI agents interact with the Stripe API by using Stripe's MCP server. Includes tools for managing customers, products, prices, invoices, payments and more.",
        "author": "Stripe",
        "homepage": "https://docs.stripe.com/mcp",
        "tags": [
            "payment",
            "stripe",
            "billing",
            "ecommerce",
            "finance"
        ],
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "-y",
                    "@stripe/mcp",
                    "--tools=all"
                ],
                "is_user_fill": false
            },
            {
                "key": "env",
                "value": {
                    "STRIPE_SECRET_KEY": "$STRIPE_SECRET_KEY$"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$STRIPE_SECRET_KEY$",
                        "desc": "Stripe Secret Key",
                        "doc": "https://docs.stripe.com/keys#create-restricted-api-secret-key",
                        "placeholder": "Stripe Secret Key"
                    }
                ]
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            }
        ]
    },
    {
        "id": "ipinfo-mcp-server",
        "name": "IPinfo Geolocation",
        "category": "Network",
        "description": "A Model Context Protocol server that uses the ipinfo.io API to get detailed information about an IP address. This can be used to determine where the user is located (approximately) and what network they are using.",
        "author": "briandconnelly",
        "homepage": "https://github.com/briandconnelly/mcp-server-ipinfo",
        "tags": [
            "network",
            "ip",
            "geolocation",
            "ipinfo"
        ],
        "config": [
            {
                "key": "command",
                "value": "uvx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "mcp-server-ipinfo"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "env",
                "value": {
                    "IPINFO_API_TOKEN": "$IPINFO_API_TOKEN$"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$IPINFO_API_TOKEN$",
                        "desc": "IPInfo API Token",
                        "doc": "https://ipinfo.io/dashboard/token",
                        "placeholder": "YOUR_IPINFO_API_TOKEN"
                    }
                ]
            }
        ]
    },
    {
        "id": "mcp-server-time",
        "name": "Time Server",
        "category": "Utilities",
        "description": "A Model Context Protocol server that provides current time information. Allows AI agents to access real-time information for time-based operations and scheduling.",
        "author": "ModelContextProtocol",
        "homepage": "https://github.com/modelcontextprotocol/servers/tree/main/src/time",
        "tags": [
            "utilities",
            "time",
            "clock",
            "datetime"
        ],
        "config": [
            {
                "key": "command",
                "value": "uvx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "mcp-server-time"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            }
        ]
    },
    {
        "id": "mcp-echarts",
        "name": "MCP ECharts",
        "category": "Visualization",
        "description": "Generate visual charts using ECharts with AI MCP dynamically for chart generation and data analysis",
        "author": "hustcc",
        "homepage": "https://github.com/hustcc/mcp-echarts",
        "prerequisites": [
            "node"
        ],
        "tags": [
            "visualization",
            "charts",
            "data-analysis",
            "echarts"
        ],
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "-y",
                    "mcp-echarts"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            }
        ]
    },
    {
        "id": "wordpress-mcp",
        "name": "WordPress",
        "category": "Productivity",
        "description": "A Model Context Protocol server for interacting with WordPress sites",
        "author": "Automattic",
        "homepage": "https://github.com/Automattic/wordpress-mcp",
        "tags": [
            "wordpress",
            "cms",
            "blog",
            "content"
        ],
        "prerequisites": [
            "node"
        ],
        "config": [
            {
                "key": "command",
                "value": "npx",
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "args",
                "value": [
                    "-y",
                    "@automattic/mcp-wordpress-remote@latest"
                ],
                "is_user_fill": false,
                "fill_fields": []
            },
            {
                "key": "env",
                "value": {
                    "WP_API_URL": "https://your-site.com/",
                    "WP_API_USERNAME": "your-username",
                    "WP_API_PASSWORD": "your-application-password"
                },
                "is_user_fill": true,
                "fill_fields": [
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$WP_API_URL$",
                        "desc": "WordPress URL",
                        "doc": "The URL of your WordPress site",
                        "placeholder": "https://your-site.com/"
                    },
                    {
                        "input_type": "text",
                        "out_type": "string",
                        "replace_placehold": "$WP_API_USERNAME$",
                        "desc": "WordPress Username",
                        "placeholder": "your-username"
                    },
                    {
                        "input_type": "password",
                        "out_type": "string",
                        "replace_placehold": "$WP_API_PASSWORD$",
                        "desc": "WordPress Password",
                        "placeholder": "your-application-password"
                    }
                ]
            },
            {
                "key": "enabled",
                "value": true,
                "is_user_fill": false,
                "fill_fields": []
            }
        ]
    }
]